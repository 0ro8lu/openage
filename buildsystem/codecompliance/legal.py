# Copyright 2014-2015 the openage authors. See copying.md for legal info.

"""
Checks the legal headers of all files.
"""

import re
from subprocess import Popen, PIPE

from .util import findfiles, readfile, has_ext

NATIVELEGALHEADER = re.compile(
    "^"
    # allow shebang line, followed by an optional empty line
    "(#!/.*\n(#?\n)?)?"

    # next line must be the copyright line
    "(#|//) "
    "Copyright (?P<crstart>\\d{4})-(?P<crend>\\d{4}) the openage authors\\. "
    "See copying\\.md for legal info\\.\n")

THIRDPARTYLEGALHEADER = re.compile(
    "^"
    # 3rd-party copyright/license
    "(#|//) This file (was (taken|adapted)|contains (data|code)) from .*\n"
    "(#|//) Copyright \\d{4}-\\d{4} .*\n"
    "(#|//) .*license.*\n"

    # any number of lines containing further 3rd-party copyright info
    "((#|//) .*\\n)*"

    # the openage copyright
    "(#|//) (Modifications|Other (data|code)|Everything else) "
    "Copyright (?P<crstart>\\d{4})-(?P<crend>\\d{4}) the openage authors\\.\n"
    "(#|//) See copying\\.md for further legal info\\.\n")

# empty files (consisting of only comments) don't require a legal header
EMPTYFILE = re.compile("^(((#|//) .*)?\n)*$")

# cython-generated files
CYTHONGENERATED = re.compile("^[^\\n]*(Generated by Cython |failed Cython compilation.)")


EXTENSIONS_REQUIRING_LEGAL_HEADERS = {
    '.h', '.cpp', '.py', '.pyx', 'pxi', ".cmake",
    '.h.in', '.cpp.in', '.py.in',
    '.h.template', '.cpp.template', '.py.template',
}


def match_legalheader(data):
    """
    Tests whether data matches any of the regular expressions,
    and returns a tuple of (matching header regex, match).
    """
    for hdr in (NATIVELEGALHEADER,
                THIRDPARTYLEGALHEADER,
                EMPTYFILE,
                CYTHONGENERATED):

        match = re.match(hdr, data)
        if match is not None:
            return hdr, match

    raise LegalIssue("No valid legal header text found")


class LegalIssue(Exception):
    """ Some issue with the legal header. """
    pass


def find_issues(check_files, paths, git_copyright_year=False):
    """
    tests all source files for the required legal headers.
    """
    third_party_files = set()

    # test all in-sourcefile legal headers
    for filename in findfiles(paths, EXTENSIONS_REQUIRING_LEGAL_HEADERS):
        try:
            headertype, match = match_legalheader(readfile(filename))

            if git_copyright_year and (check_files is None or
                                       filename in check_files):

                try:
                    end_year = match.group('crend')
                except IndexError:
                    # the header doesn't contain copyright years; don't check
                    # them (probably it's an empty file)
                    pass
                else:
                    test_git_copyright_year(filename, int(end_year))

            if headertype is THIRDPARTYLEGALHEADER:
                third_party_files.add(filename)

        except LegalIssue as exc:
            yield (
                "legal header text issue in {}".format(filename),
                "\n\t{}\n\tSee copying.md for guidelines and a "
                "template".format(exc.args[0]))

    # test whether all third-party files are listed in copying.md
    listed_files = set()
    for line in readfile('copying.md').split('\n'):
        match = re.match("^ - `([^`]+)`.*$", line)
        if not match:
            continue

        filename = match.group(1)
        listed_files.add(filename)

    # file listed, but has no 3rd-party header?
    for filename in sorted(listed_files - third_party_files):
        if has_ext(filename, EXTENSIONS_REQUIRING_LEGAL_HEADERS):
            yield (
                "third-party file listing issue",
                ("{}\n\tlisted in copying.md, but has no "
                 "third-party license header.").format(filename))

    # file has 3rd-party header, but is not listed?
    for filename in sorted(third_party_files - listed_files):
        yield ("third-party file listing issue",
               ("{}\n\thas a third-party license header, but isn't "
                "listed in copying.md").format(filename))


def test_git_copyright_year(filename, statedyear):
    """
    Checks whether the stated copyright year concurs with the git log.
    """

    invocation = [
        'git',
        'log',
        '-1',
        '--format=%ad',
        '--date=short',
        '--',
        filename]

    proc = Popen(invocation, stdout=PIPE)
    output = proc.communicate()[0].decode('utf-8', errors='ignore').strip()

    if proc.returncode != 0 or not output:
        return

    logyear = int(output[:4])

    if logyear != statedyear:
        raise LegalIssue((
            "Bad last copyright year in legal header:\n"
            "\texpected {}\n"
            "\tfound    {}").format(
                repr(logyear),
                repr(statedyear)))
