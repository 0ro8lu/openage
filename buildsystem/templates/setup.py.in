#!/usr/bin/env python3
#
# epic distutils-cmake interface.
# the cmake config specifies python and
# native c python modules to export

from distutils.core import setup, Extension
import shlex
import os

pyext_cxxflags = shlex.split("${CMAKE_CXX_FLAGS}")
pyext_linkflags = shlex.split("${CMAKE_SHARED_LINKER_FLAGS}")

# a dict containing pure python package name: [known sources]
py_packages = {${pkg_src}}

# a dict containing C++ extension module name: [c++ sources]
pyext_modules = {${ext_src}}

settings = {
    "name":        '${PROJECT_NAME}',
    "version":     '${PROJECT_VERSION}',
    "description": '${PROJECT_NAME} python components',
    "author":      '[SFT]Tech',
    "url":         'http://${PROJECT_NAME}.sft.mx',
    "license":     'GPLv3+',
    "package_dir": {'': '${CMAKE_SOURCE_DIR}'},
    "packages":    list(py_packages),
    "ext_modules": [Extension(name=modname,
                              sources=['${CMAKE_SOURCE_DIR}/%s' % f for f in sources],
                              extra_compile_args=pyext_cxxflags,
                              extra_link_args=pyext_linkflags,
                              language='c++')
                    for modname, sources in pyext_modules.items()]
}

def is_cmake_update_needed():
    """
    check whether sources were added to or removed from any of the
    python packages. if so, cmake needs to be triggered again,
    to update the depends list in the Makefile.
    setup() _does_ internally do something like this,
    but there seems to be no way to extract the list of found .py
    files for each package.
    """
    result = False
    for pkgname, knownsources in py_packages.items():
        relsourcedir = pkgname.replace('.', '/')
        sourcedir = "${CMAKE_SOURCE_DIR}/%s" % relsourcedir
        actualsources = {relsourcedir + "/" + x for x in os.listdir(sourcedir) if x.endswith('.py')}
        knownsources = set(knownsources)
        if actualsources != knownsources:
            if actualsources - knownsources:
                print("the following sources have been added to %s: %s"
                    % (pkgname, ", ".join(actualsources - knownsources)))
            if knownsources - actualsources:
                print("the following sources have been removed from %s: %s"
                    % (pkgname, ", ".join(knownsources - actualsources)))

            result = True

    return result

def trigger_cmake_update():
    print("triggering cmake update")
    try:
        os.utime('${CMAKE_CURRENT_LIST_FILE}')
    except FileNotFoundError:
        print('error: file does not exist: ${CMAKE_CURRENT_LIST_FILE}')

if __name__ == '__main__':
    if is_cmake_update_needed():
        trigger_cmake_update()

    setup(**settings)
