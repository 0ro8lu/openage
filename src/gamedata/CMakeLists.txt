#autogenerated struct files
#
#the gamedata format is defined in the convert script,
#and it can dynamically be exported to C code.


#the convert script invocation
set(CONVERT_CALL python3 convert structs) #python3 convert structs")

#ask the convert script which source files it can generate
execute_process(COMMAND
	${CONVERT_CALL} "--list-files"
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	OUTPUT_VARIABLE FILES_TO_GENERATE
	RESULT_VARIABLE GEN_LIST_RESULT
)

#for now, just recreate the files all the fime
#very dirty, has to be removed soon.
execute_process(COMMAND
	${CONVERT_CALL} "-o" "${CMAKE_CURRENT_SOURCE_DIR}"
	WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
	RESULT_VARIABLE GEN_RESULT
)



#TODO: split the files list at newlines
#this is the main problem, if the filenames are split,
#rules can be created for on-demand generation

#where the generated files will be put
set(DESTINATION_FOLDER ${CMAKE_CURRENT_SOURCE_DIR})

message("generating rules for:\n${FILES_TO_GENERATE}")

#create conversion command for each file to generate
set(GENERATED_FILES "")
foreach(FILE_NAME ${FILES_TO_GENERATE})
	#this file will be generated by the command
	set(GEN_FILE "${DESTINATION_FOLDER}/${FILE_NAME}")
	add_custom_command(
		OUTPUT "${GEN_FILE}"
		COMMAND "${CONVERT_CALL}" -o "${GEN_FILE}" "${FILE}"
		COMMENT "Generating ${FILE}"
	)
	message("folder:\n${DESTINATION_FOLDER}\n")
	message("appending:\n${GEN_FILE}")
	list(APPEND GENERATED_FILES "${GEN_FILE}")
endforeach()

message("files to be generated:\n${GENERATED_FILES}")

#this target can generate the source files
add_custom_target(structs ALL DEPENDS ${GENERATED_FILES})
