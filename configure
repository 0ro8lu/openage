#!/usr/bin/env python3

# this is a convenience script that will simply create a build directory and
# invoke cmake.

import argparse
from multiprocessing import cpu_count
import os
import subprocess
import shutil
import shlex
shlex.join = lambda args: ' '.join(shlex.quote(a) for a in args)


def getenv(*varnames, default=""):
    """
    fetches an environment variable.
    tries all given varnames until it finds an existing one.
    if none fits, returns default.
    """
    for v in varnames:
        if v in os.environ:
            return os.environ[v]

    return default


# argparsing
description = "convenience script to create a build directory "
description += "and invoke cmake."
epilog = "environment variables like CXX and CXXFLAGS are honored, "
epilog += "but overwritten if their respective arguments are specified."

ap = argparse.ArgumentParser(description=description, epilog=epilog)
ap.add_argument("--mode", "-m", choices=["debug", "release",
                "excessively_optimized"], default="release",
                help="controls cmake build mode and some compiler flags")
ap.add_argument("--compiler", "-c",
                default=getenv("CXX", "CC", default="gcc"),
                help="the compiler to use: e.g. clang, gcc")
ap.add_argument("--flags", "-f",
                default=getenv("CXXFLAGS", "CCFLAGS", "CFLAGS"),
                help="compiler flags")
ap.add_argument("--ldflags", "-l",
                default=getenv("LDFLAGS"),
                help="linker flags")
ap.add_argument("--prefix", "-p", default="/usr/local",
                help="installation directory prefix, e.g. /usr/games")

args = ap.parse_args()

try:
    subprocess.call(['cowsay', 'openage configure helper'])
    print('')
except:
    pass

defines = {}

# args.mode
mode = args.mode
if mode == 'debug':
    build_type = 'Debug'
else:
    build_type = 'Release'
defines.update(build_type=build_type)

# args.compiler
if args.compiler.lower() in {'clang', 'clang++', 'llvm'}:
    cc, cxx = 'clang', 'clang++'
elif args.compiler.lower() in {'gcc', 'g++', 'gnu'}:
    cc, cxx = 'gcc', 'g++'
else:
    print("WARNING: unknown compiler: %s" % cc)
    cc, cxx = args.compiler

defines.update(c_compiler=cc, cxx_compiler=cxx)

# args.flags, args.ldflags, args.excessive_optimization
flags = shlex.split(args.flags)
ldflags = shlex.split(args.ldflags)

# if no flags have been given, populate them from the other args
if not flags and not ldflags:
    if mode == 'debug':
        if cc == 'gcc':
            flags.append("-Og")
        elif cc == 'clang':
            flags.append("-O1")
    elif mode == 'release':
        flags.append("-O2")
    elif mode == 'excessively_optimized':
        flags.append("-O3")
        flags.append("-march=native")
        if cc in {'gcc'}:
            flags.append("-flto=%d" % cpu_count())
            ldflags.append("-flto=%d" % cpu_count())

flags = shlex.join(flags)
ldflags = shlex.join(ldflags)
defines.update(c_flags=flags, cxx_flags=flags, exe_linker_flags=ldflags,
               module_linker_flags=ldflags, shared_linker_flags=ldflags)

# args.prefix
defines.update(install_prefix=args.prefix)

# create the build dir and symlink it to 'bin'
bindir = ".bin/%s/%s" % (mode, cc)
os.makedirs(bindir, exist_ok=True)
if os.path.exists('bin'):
    os.unlink('bin')
os.symlink(bindir, 'bin')

# memorize the current working directory, switch to the bin dir
project_root = os.getcwd()
os.chdir(bindir)

# calculate cmake invocation from defines dict
invocation = ['cmake']
maxkeylen = max(len(k) for k in defines)
for k, v in defines.items():
    print('%s | %s' % (k.rjust(maxkeylen), v))

    # work around this cmake 'feature':
    # when run in an existing build directory, if CC or CXX are given, all other
    # arguments are ignored... this is retarded.
    if not os.path.exists('CMakeCache.txt'):
        invocation.append('-DCMAKE_%s=%s' % (k.upper(), shlex.quote(v)))
invocation.append('--')
invocation.append(project_root)

# invoke cmake
print('\nbindir:\n./%s/\n' % bindir)
print('invocation:\n\n%s' % ' '.join(invocation))
try:
    exit(subprocess.call(invocation))
except FileNotFoundError:
    print("cmake was not found. it is a build dependency for openage.")
    exit(1)
