COMPREHENSIVE LIST OF ALL COORDINATE SYSTEMS

phys2/phys3
	Physics coordinates
	orthonormal 2D/3D (NE,SE)/(NE,SE,UP), fixed-point, in tu/teu

	origin is in the middle of tile (0,0) (at elevation 0)
	positive in NE, SE, UP directions

	a unit at (0.5,0.5) stands on the east corner of tile (0,0)

	NE: north-east, in tu (terrain length unit)
	SE: south-east, in tu (terrain length unit)
	UP: guess what, in teu (terrain elevation unit)

	we believe that 1 teu = 1 tu / sqrt(8) (from aspect ration calculations)
	the actual relation is pretty irrelevant, though.

	given in these systems:
		Camera
		Units
		Projectiles

tile/tile3
	Tile coordinates
	orthonormal 2D/3D (NE,SE)/(NE,SE,UP), integer, in tu/teu

	identical to phys2/phys3 systems, but uses integers

	given in these systems:
		Terrain tiles
		Buildings

chunk
	Chunk coordinates
	orthonormal 2D (NE,SE), integer, in 16tu/16teu

	similar to tile system, but describes chunks of 16x16 tiles

	given in these systems:
		Chunks

window
	Window coordinates
	orthonormal 2D (x,y), integer, in pixels

	origin is top left corner of window
	positive in right and down directions

	given in this system:
		SDL mouse
		OpenGL viewport

camgame
	game camera coordinates
	orthonormal 2D (x,y), integer, in pixels

	origin is center of window
	positive in up, right directions

	while in game rendering mode, the renderer accepts
	coordinates of this type.

camhud
	game camera coordinates
	orthonormal 2D (x,y), integer, in pixels

	origin is bottom left corner of window
	positive in up, right directions

	while in hud rendering mode, the renderer accepts
	coordinates of this type.



CONVERSIONS



for rendering
	depending on where they are rendered,
	objects are transformed to coord_camera or coord_hud

for input processing
	depending on whether they happened on a HUD object,
	mouse clicks are transformed to coord_phys or coord_hud

	idea: HUD drawing code will register HUD objects with the engine
	the engine then memorizes the areas where HUD objects are drawn,
	and checks whether the mouse click lies within one of the rectangles

conversion from coord_phys to coord_camera:
	subtract camera coordinates from a
	a should now be very close to 0, minimizing floating point errors.

	now, use transformation matrix to convert to coord_camera

conversion coord_camera a -> coord_phys b:
	use transformation matrix to convert to coord_camera
	add camera coordinates
