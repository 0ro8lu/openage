# creates rules for auto-generating gamedata struct code
#
# the gamedata format is defined in the convert script,
# which can and will dynamically export it to C code.

# TODO re-write this whole thing (instead, create buildsystem/codegen.cmake)

# the convert script invocation
set(CODEGEN_INVOCATION ${PYTHON_INVOCATION} -m openage.convert structs)

# ask the convert script which source files it can generate
execute_process(COMMAND
	${CODEGEN_INVOCATION} "--list-files"
	WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	OUTPUT_VARIABLE FILES_TO_GENERATE
	RESULT_VARIABLE COMMAND_RESULT
)

if(NOT ${COMMAND_RESULT} EQUAL 0)
	message("${CODEGEN_INVOCATION}")
	message(FATAL_ERROR "failed to get codegen filelist via convert script invocation")
endif()

# create codegen command for each file to generate
set(GENERATED_FILES "")

foreach(FILE_NAME ${FILES_TO_GENERATE})
	#this file will be generated by the command
	set(FILE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${FILE_NAME}")

	# TODO cmake will currently have to be manually re-run immediately
	# whenever codegen would create an additional file
	# TODO dynamically add all relevant pyfiles
	set(DEPENDS "${PYTHON_SOURCE_DIR}/openage/convert/dataformat.py")

	#the file-generation command that will be invoked
	add_custom_command(
		OUTPUT "${FILE_PATH}"
		COMMAND ${CODEGEN_INVOCATION} -o "${CMAKE_CURRENT_SOURCE_DIR}" "${FILE_NAME}"
		WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
		DEPENDS ${DEPENDS}
		COMMENT "generating ${FILE_NAME}"
		VERBATIM
	)
	message("added codegen target: ${FILE_NAME}")
	list(APPEND GENERATED_FILES "${FILE_PATH}")
endforeach()

# static library for the generated files
add_library(gamedata STATIC ${GENERATED_FILES})

# target for explicit generation of files
add_custom_target(codegen ALL DEPENDS ${GENERATED_FILES})
